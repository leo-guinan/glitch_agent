name: Deploy to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: leoai-nexus-data-lake
  GCP_ZONE: us-central1-a
  GCP_INSTANCE_NAME: mastra-app
  GCP_REGION: us-central1
  IMAGE_NAME: mastra-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'beta'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/app:${{ github.sha }}"
          docker build \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            -t ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}

      - name: Setup SSH Access
        run: |
          # Generate SSH key
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -C "635202209750-compute@developer.gserviceaccount.com" -f ~/.ssh/id_rsa -N ""
          
          # Get the current metadata
          METADATA=$(gcloud compute instances describe ${{ env.GCP_INSTANCE_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --format='get(metadata.items[?(@.key=="ssh-keys")].value)' || echo "")
          
          # Append new SSH key
          NEW_KEY="sa_635202209750_compute_developer_gserviceaccount_com:$(cat ~/.ssh/id_rsa.pub)"
          if [ -z "$METADATA" ]; then
            FINAL_KEYS="$NEW_KEY"
          else
            FINAL_KEYS="$METADATA\n$NEW_KEY"
          fi
          
          # Update instance metadata
          echo -e "$FINAL_KEYS" > ssh_keys.txt
          gcloud compute instances add-metadata ${{ env.GCP_INSTANCE_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --metadata-from-file ssh-keys=ssh_keys.txt
          
          # Configure SSH
          cat > ~/.ssh/config << EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config

      - name: Generate Deploy Script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          # Function to check if port is in use
          check_port() {
            if sudo lsof -i :4111; then
              echo "Port 4111 is still in use"
              return 1
            fi
            return 0
          }

          # Install or update Docker
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
          fi

          # Stop existing containers
          sudo docker ps -q | xargs -r sudo docker stop
          sudo docker ps -aq | xargs -r sudo docker rm

          # Wait for port to be free
          for i in {1..5}; do
            if check_port; then
              break
            fi
            echo "Waiting for port 4111 to be free... attempt $i"
            sleep 5
          done

          # Pull and run new container
          sudo docker pull ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/app:${{ github.sha }}
          sudo docker run -d \
            --name mastra-app \
            --restart unless-stopped \
            -p 4111:4111 \
            --log-driver=gcplogs \
            -e API_KEYS='${{ secrets.API_KEYS }}' \
            -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            -e GCP_PROJECT_ID='${{ env.GCP_PROJECT_ID }}' \
            -e GCP_ZONE='${{ env.GCP_ZONE }}' \
            -e GCP_INSTANCE_NAME='${{ env.GCP_INSTANCE_NAME }}' \
            -e TWITTER_API_KEY='${{ secrets.TWITTER_API_KEY }}' \
            -e TWITTER_API_SECRET='${{ secrets.TWITTER_API_SECRET }}' \
            -e TWITTER_ACCESS_TOKEN='${{ secrets.TWITTER_ACCESS_TOKEN }}' \
            -e TWITTER_ACCESS_SECRET='${{ secrets.TWITTER_ACCESS_SECRET }}' \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/app:${{ github.sha }}

          # Wait for container to be healthy
          for i in {1..30}; do
            if curl -s http://localhost:4111/health > /dev/null; then
              echo "Application is healthy"
              exit 0
            fi
            echo "Waiting for application to be healthy... attempt $i"
            sleep 5
          done

          echo "Application failed to become healthy"
          sudo docker logs mastra-app
          exit 1
          EOF

          chmod +x deploy.sh

      - name: Deploy to Instance
        run: |
          # Get instance IP
          INSTANCE_IP=$(gcloud compute instances describe ${{ env.GCP_INSTANCE_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          # Copy deploy script
          scp -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            deploy.sh sa_635202209750_compute_developer_gserviceaccount_com@${INSTANCE_IP}:~/deploy.sh
          
          # Execute deploy script
          ssh -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            sa_635202209750_compute_developer_gserviceaccount_com@${INSTANCE_IP} 'bash ~/deploy.sh'

      - name: Verify Deployment
        run: |
          # Get instance IP
          INSTANCE_IP=$(gcloud compute instances describe ${{ env.GCP_INSTANCE_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          # Wait for instance to be reachable
          for i in {1..10}; do
            if ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              sa_635202209750_compute_developer_gserviceaccount_com@${INSTANCE_IP} 'curl -s http://localhost:4111/health'; then
              echo "Deployment verified successfully"
              exit 0
            fi
            echo "Waiting for deployment verification... attempt $i"
            sleep 30
          done
          
          echo "Failed to verify deployment"
          ssh -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            sa_635202209750_compute_developer_gserviceaccount_com@${INSTANCE_IP} 'sudo docker logs mastra-app'
          exit 1 