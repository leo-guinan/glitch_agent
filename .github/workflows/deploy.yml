name: Deploy to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: leoai-nexus-data-lake
  GCP_ZONE: us-central1-a
  GCP_INSTANCE_NAME: mastra-app
  GCP_REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          token_format: access_token

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gcloud beta
        run: |
          gcloud components install beta --quiet
          gcloud components update

      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/google_compute_engine
          PUBLIC_KEY=$(cat ~/.ssh/google_compute_engine.pub)
          gcloud compute instances add-metadata mastra-app \
            --project=${{ env.GCP_PROJECT_ID }} \
            --zone=${{ env.GCP_ZONE }} \
            --metadata=ssh-keys="sa_108021618259102911541:$PUBLIC_KEY"
          chmod 600 ~/.ssh/google_compute_engine
          echo -e "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Docker Auth
        run: |
          echo ${{ steps.auth.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mastra-app/app:${{ github.sha }} .
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mastra-app/app:${{ github.sha }}

      - name: Setup and Deploy
        run: |
          # Create setup script
          cat > setup.sh << 'EOF'
          #!/bin/bash
          # Install Docker
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common net-tools psmisc
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable'
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Stop any process using port 4111
          sudo pkill -f 'node.*4111' || true
          sudo docker ps -aq | xargs -r sudo docker rm -f
          sudo docker system prune -af

          # Check if port is still in use
          if sudo netstat -tlpn | grep ':4111'; then
            echo 'Port 4111 still in use after cleanup'
            sudo netstat -tlpn | grep ':4111'
            sudo ps aux | grep node
            exit 1
          fi

          # Run new container
          sudo docker run -d \
            --name mastra-app \
            --restart unless-stopped \
            -p 4111:4111 \
            -e API_KEYS='${{ secrets.API_KEYS }}' \
            -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            -e GCP_PROJECT_ID='${{ env.GCP_PROJECT_ID }}' \
            -e GCP_ZONE='${{ env.GCP_ZONE }}' \
            -e GCP_INSTANCE_NAME='${{ env.GCP_INSTANCE_NAME }}' \
            -e TWITTER_API_KEY='${{ secrets.TWITTER_API_KEY }}' \
            -e TWITTER_API_SECRET='${{ secrets.TWITTER_API_SECRET }}' \
            -e TWITTER_ACCESS_TOKEN='${{ secrets.TWITTER_ACCESS_TOKEN }}' \
            -e TWITTER_ACCESS_SECRET='${{ secrets.TWITTER_ACCESS_SECRET }}' \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mastra-app/app:${{ github.sha }}
          EOF

          chmod +x setup.sh

          # Upload script to GCS
          BUCKET_NAME="${{ env.GCP_PROJECT_ID }}-setup-scripts"
          gsutil mb -p ${{ env.GCP_PROJECT_ID }} gs://${BUCKET_NAME} || true
          gsutil cp setup.sh gs://${BUCKET_NAME}/setup.sh

          # Set metadata to run script
          gcloud compute instances add-metadata mastra-app \
            --project=${{ env.GCP_PROJECT_ID }} \
            --zone=${{ env.GCP_ZONE }} \
            --metadata=startup-script-url=gs://${BUCKET_NAME}/setup.sh

          # Reset instance to run script
          gcloud compute instances reset mastra-app \
            --project=${{ env.GCP_PROJECT_ID }} \
            --zone=${{ env.GCP_ZONE }} \
            --quiet

          # Wait for instance to come up and script to complete
          echo "Waiting for instance to come up and script to complete..."
          sleep 120

          # Clean up
          gsutil rm gs://${BUCKET_NAME}/setup.sh 